
import { Injectable, CanActivate, ExecutionContext, NotAcceptableException } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { UsersService } from './users.service';
import { User } from './user.entity';
import { CollectionsService } from 'src/collections/collections.service';
import { ItemsService } from 'src/items/items.service';
import { Collection } from 'src/collections/collection.entity';
import { Item } from 'src/items/item.entity';
import { UserToGroup } from 'src/userToGroup/userToGroup.entity';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private usersService: UsersService, private collectionsService: CollectionsService,
    private itemsService: ItemsService, private reflector: Reflector) { }
  async canActivate(
    context: ExecutionContext,
  ): Promise<boolean> {
    const allowedRoles = this.reflector.getAllAndMerge<string[]>('roles', [
      context.getHandler(),
      context.getClass(),
    ]);
    const request = context.switchToHttp().getRequest();
    const userId = request.params.userid;
    const method = request.method;
    try {
      const user: User = await this.usersService.getUserById(userId);

      //GlobalManager
      if (user.roles.length === 0)
        return Promise.resolve(true);
      else if (allowedRoles.length > 0) {
        if (request.url.search("collections") !== -1) {
          if (method.search("POST") === -1) {
            const params = request.params;
            const id = params.id;
            return this.isCollectionOperationPermitted(id, user.roles, allowedRoles);
          }
          else
            return Promise.resolve(true);
        }
        else if (request.url.search("items") !== -1) {
          if (method.search("POST") === -1) {
            const params = request.params;
            const id = params.id;
            return this.isItemOperationPermitted(id, user.roles, allowedRoles);
          }
          else {
            const body = request.body;
            const id = body.collectionId;
            return this.isCollectionOperationPermitted(id, user.roles, allowedRoles);
          }
        }
        else if (request.url.search("users") !== -1) {
          if (request.url.search("roles") !== -1) {
            const body = request.body;
            //Only 1 role must be set in this request and it must be for the group
            //that the user is a manager for.            
            if (body.roles && body.roles.length === 1 && body.roles[0].groupId) {              
              if (user.roles.find(role => role.groupId === body.roles[0].groupId &&
                allowedRoles.find(allowedRole => allowedRole === role.role))) {                  
                const params = request.params;
                const id = params.id;
                try {
                  const userBeingUpdated: User = await this.usersService.getUserById(id);
                  // The user being updated must only have 1 role and it must be the role of the manager 
                  // doing the update.
                  const userBeingUpdatedRoles: UserToGroup[] = userBeingUpdated.roles;
                  if(userBeingUpdatedRoles.length === 1){
                    if(userBeingUpdatedRoles.find(role => role.groupId === body.roles[0].groupId))                    
                      return Promise.resolve(true);
                  }
                }
                catch (error) {
                  // User being altered does not exist. Passing it through as the error
                  // will be generated by the handler.
                  return Promise.resolve(true);
                }
              }
            }
          }
        }
        return Promise.resolve(false);
      }
    }
    catch (error) {
      throw new NotAcceptableException('Invalid User.');
    }
  }

  async isCollectionOperationPermitted(collectionId: number, userRoles: any[], allowedRoles: string[]): Promise<boolean> {
    let groupId: number;
    const collection: Collection = await this.collectionsService.getCollectionById(collectionId);
    if (collection.group) {
      groupId = collection.group.id;
      if (userRoles.find(role => role.groupId === groupId &&
        allowedRoles.find(allowedRole => allowedRole === role.role))) {
        return Promise.resolve(true);
      }
    }
    return Promise.resolve(false);
  }

  async isItemOperationPermitted(itemId: number, userRoles: any[], allowedRoles: string[]): Promise<boolean> {
    try {
      const item: Item = await this.itemsService.getItemById(itemId);
      return this.isCollectionOperationPermitted(item.collection.id, userRoles, allowedRoles);
    }
    catch (error) {
      return Promise.resolve(true);
    }
  }
}